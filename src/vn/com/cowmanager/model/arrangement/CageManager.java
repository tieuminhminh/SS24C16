package vn.com.cowmanager.model.arrangement;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.util.Tuple;
import vn.com.cowmanager.model.report.CageStatusReport;
import vn.com.cowmanager.model.report.TradingSurveyReport;

@DClass(schema = "arrangement")
public class CageManager {

	public static final String A_id = "id";
	public static final String A_cage = "cage";
	public static final String A_numberOfCow = "numberOfCow";
	public static final String A_weightAvg = "weightAvg";
	public static final String A_spaceCondition = "spaceCondition";
	public static final String A_enviCondition = "enviCondition";
	public static final String A_date = "date";
	public static final String A_dayLeft = "dayLeft";
	public static final String A_outStandard = "outStandard";
	public static final String A_cageStatusReport = "cageStatusReport";
	public static final String A_tradingServeyReport = "tradingServeyReport";

	private static int idCounter = 0;

	@DAttr(name = A_id, type = Type.String, id = true, auto = true, optional = false, mutable = false, length = 6)
	private String id;

	@DAttr(name = A_cage, type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "breedingManager-has-cage", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "breedingManager", associate = @Associate(cardMax = 25, cardMin = 1, type = Cage.class))
	private Cage cage;

	@DAttr(name = A_numberOfCow, type = Type.Integer, mutable = false, length = 6)
	private Integer numberOfCow;

	@DAttr(name = A_weightAvg, type = Type.Double, mutable = false, length = 6)
	private Double weightAvg;

	@DAttr(name = A_spaceCondition, type = Type.String, mutable = false, length = 15)
	private String spaceCondition;

	@DAttr(name = A_enviCondition, type = Type.String, length = 15)
	private String enviCondition;

	@DAttr(name = A_date, type = Type.String, optional = false, length = 15)
	private String date;

	@DAttr(name = A_dayLeft, type = Type.Integer, mutable = false, length = 6)
	private Integer dayLeft;

	@DAttr(name = A_outStandard, type = Type.String, mutable = false, length = 25)
	private String outStandard;

	// v5.0: to realise link to report
	@DAttr(name = A_cageStatusReport, type = Type.Domain, serialisable = false, virtual = true)
	private CageStatusReport cageStatusReport;

	@DAttr(name = A_tradingServeyReport, type = Type.Domain, serialisable = false, virtual = true)
	private TradingSurveyReport tradingServeyReport;

	public CageManager(String id, Cage cage, Integer numberOfCow, Double weightAvg, String spaceCondition,
			String enviCondition, String date, Integer dayLeft, String outStandard) {
		this.id = nextId(id);
		this.cage = cage;
		this.enviCondition = enviCondition;
		this.date = date;
		calAutogeneratedValues();
	}

	public CageManager(@AttrRef("cage") Cage cage, @AttrRef("numberOfCow") Integer numberOfCow,
			@AttrRef("weightAvg") Double weightAvg, @AttrRef("spaceCondition") String spaceCondition,
			@AttrRef("enviCondition") String enviCondition, @AttrRef("date") String date,
			@AttrRef("dayLeft") Integer dayLeft, @AttrRef("outStandard") String outStandard) {
		this(null, cage, numberOfCow, weightAvg, spaceCondition, enviCondition, date, dayLeft, outStandard);
	}

	// automatically generate the next student id
	private String nextId(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
			idCounter++;
			return "CM" + idCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(2));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using
	 *          <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more
			// than one auto attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(2));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}

	public void calAutogeneratedValues() {
		calNumberOfCow();
		calWeightAvg();
		validateSpace();
		calDayLeft();
		calOutStandard();
	}

	private void calOutStandard() {
		if (dayLeft < 15) {
			outStandard = "Can be traded";
		} else {
			outStandard = "Need more raise";
		}
	}

	private void validateSpace() {

		int cardMax = cage.getCardMax();
		int cowInCage = cage.getCowCount();
		int freeSpace = cardMax - cowInCage;
		if (freeSpace == 0) {
			spaceCondition = "Full(" + cowInCage + "/" + cardMax + ")";
		} else if (freeSpace < 0) {
			spaceCondition = "Overload(" + cowInCage + "/" + cardMax + ")";
		} else if (freeSpace == cardMax) {
			spaceCondition = "Empty Cage";
		} else {
			spaceCondition = "Free space: " + freeSpace;
		}
	}

	private void calDayLeft() {
		if (cage.getLstCow() != null) {
			List<Cow> lstCow = cage.getLstCow();
			SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date b = null;
			int result = 0;
			Date dCurrentDate = null;

			try {
				dCurrentDate = df.parse(date);
			} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			int maxDayLeft = 0;
			for (Cow objCow : lstCow) {
				String a = objCow.getDateForSale();
				try {
					b = df.parse(a);
				} catch (ParseException e) {
					e.printStackTrace();
				}
				result = (int) ((b.getTime() - dCurrentDate.getTime()) / (1000 * 60 * 60 * 24));
				if (result > maxDayLeft) {
					maxDayLeft = result;
				}
			}
			dayLeft = maxDayLeft;
		} else {
			dayLeft = 0;
		}
	}

	private void calNumberOfCow() {
		numberOfCow = cage.getCowCount();
	}

	private void calWeightAvg() {
		if (cage.getCowCount() > 0) {
			List<Cow> lstCow = cage.getLstCow();
			Integer totalWeight = 0;
			for (Cow s : lstCow) {
				totalWeight += s.getWeight();
			}
			weightAvg = (double) (totalWeight / numberOfCow);
		} else {
			weightAvg = 0.0;
		}
	}

	@Override
	public String toString() {
		return "CageManager(" + id + "," + enviCondition + "," + numberOfCow + "," + dayLeft + ", " + date + ")";
	}

	public String getId() {
		return id;
	}

	public Cage getCage() {
		return cage;
	}

	public void setCage(Cage cage) {
		this.cage = cage;

		calAutogeneratedValues();
	}

	public Integer getNumberOfCow() {
		return numberOfCow;
	}

	public String getSpaceCondition() {
		return spaceCondition;
	}

	public Integer getDayLeft() {
		return dayLeft;
	}

	public String getEnviCondition() {
		return enviCondition;
	}

	public void setEnviCondition(String enviCondition) {
		this.enviCondition = enviCondition;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
		calAutogeneratedValues();
	}

	public Double getWeightAvg() {
		return weightAvg;
	}

	public CageStatusReport getCageStatusReport() {
		return cageStatusReport;
	}

	public TradingSurveyReport getTradingServeyReport() {
		return tradingServeyReport;
	}

	public String getOutStandard() {
		return outStandard;
	}

}
