package vn.com.cowmanager.model.arrangement;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.exceptions.NotPossibleException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;
import vn.com.cowmanager.model.business.Provider;
import vn.com.cowmanager.model.report.CowHealthReport;

@DClass(schema = "arrangement")
public class Cow {

	public static final String A_id = "id";
	public static final String A_dateBorn = "dateBorn";
	public static final String A_ageByWeek = "ageByWeek";
	public static final String A_sex = "sex";
	public static final String A_breed = "breed";
	public static final String A_status = "status";
	public static final String A_weight = "weight";
	public static final String A_cage = "cage";
	public static final String A_dateIn = "dateIn";
	public static final String A_dateForSale = "dateForSale";
	public static final String A_provider = "provider";
	public static final String A_cowHeathReport = "cowHeathReport";

	@DAttr(name = A_id, type = Type.String, id = true, auto = true, optional = false, mutable = false, length = 5)
	private String id;
	private static int idCounter = 0;

	@DAttr(name = A_dateBorn, type = Type.String, optional = false, length = 15)
	private String dateBorn;

	@DAttr(name = A_ageByWeek, type = Type.Integer, mutable = false, length = 6)
	private Integer ageByWeek;

	@DAttr(name = A_sex, type = Type.String, optional = false, length = 15)
	private String sex;

	@DAttr(name = A_breed, type = Type.String, optional = false, length = 25)
	private String breed;

	@DAttr(name = A_status, type = Type.String, optional = false, length = 25)
	private String status;

	@DAttr(name = A_weight, type = Type.Integer, optional = false, length = 6)
	private Integer weight;

	@DAttr(name = A_cage, type = Type.Domain, length = 6)
	@DAssoc(ascName = "cage-has-cow", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "cow", associate = @Associate(cardMin = 1, cardMax = 1, type = Cage.class))
	private Cage cage;

	@DAttr(name = A_dateIn, type = Type.String, length = 15, optional = false)
	private String dateIn;

	@DAttr(name = A_dateForSale, type = Type.String, length = 15, mutable = false)
	private String dateForSale;

	@DAttr(name = A_provider, type = Type.Domain, length = 6)
	@DAssoc(ascName = "provider-has-cow", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "cow", associate = @Associate(cardMax = 1, cardMin = 1, type = Provider.class))
	private Provider provider;

	// v5.0: to realise link to report
	@DAttr(name = A_cowHeathReport, type = Type.Domain, serialisable = false, virtual = true)
	private CowHealthReport cowHeathReport;

	private static int dateRaise = 180;

	@DOpt(type = DOpt.Type.DataSourceConstructor)
	public Cow(String id, String dateBorn, Integer ageByWeek, String sex, String breed, String status, Integer weight,
			Cage cage, String dateIn, String dateForSale, Provider provider) {
		this.id = nextId(id);
		if (validateDate(dateBorn)) {
			this.dateBorn = dateBorn;
		} else {
			throw new NotPossibleException(null,
					"Ä?á»‹nh dáº¡ng ngÃ y khÃ´ng há»£p lá»‡, ngÃ y Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng Ä‘Ãºng theo: dd/MM/yyyy");
		}
		this.sex = sex;
		this.breed = breed;
		this.status = status;
		this.weight = weight;
		this.cage = cage;
		if (validateDate(dateIn)) {
			this.dateIn = dateIn;
		} else {
			throw new NotPossibleException(null,
					"Ä?á»‹nh dáº¡ng ngÃ y khÃ´ng há»£p lá»‡, ngÃ y Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng Ä‘Ãºng theo: dd/MM/yyyy");
		}
		this.provider = provider;
		calAutogeneratedValues();
	}

	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	public Cow(@AttrRef("dateBorn") String dateBorn, @AttrRef("ageByWeek") Integer ageByWeek,
			@AttrRef("sex") String sex, @AttrRef("breed") String breed, @AttrRef("dateIn") String dateIn,
			@AttrRef("dateIn") String dateForSale, @AttrRef("status") String status, @AttrRef("weight") Integer weight,
			@AttrRef("cage") Cage cage, @AttrRef("provider") Provider provider) {
		this(null, dateBorn, ageByWeek, sex, breed, status, weight, cage, dateIn, dateForSale, provider);
	}

	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	public Cow(@AttrRef("dateBorn") String dateBorn, @AttrRef("ageByWeek") Integer ageByWeek,
			@AttrRef("sex") String sex, @AttrRef("breed") String breed, @AttrRef("dateIn") String dateIn,
			@AttrRef("dateIn") String dateForSale, @AttrRef("status") String status, @AttrRef("weight") Integer weight,
			@AttrRef("cage") Cage cage) {
		this(null, dateBorn, ageByWeek, sex, breed, status, weight, cage, dateIn, dateForSale, null);
	}

	public void calAutogeneratedValues() {
		try {
			calDateByWeek();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		calDateForSale();
	}

	private void calDateByWeek() throws ParseException {
		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date dDateBorn = null;
		try {
			dDateBorn = df.parse(dateBorn);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Date curDate = new Date();

		int age = (int) ((curDate.getTime() - dDateBorn.getTime()) / (1000 * 60 * 60 * 24));
		if (age > 0) {
			ageByWeek = (int) age / 7;
		} else {
			ageByWeek = 0;
		}

	}

	private void calDateForSale() {
		SimpleDateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		Date dDateIn = null;
		try {
			dDateIn = df.parse(dateIn);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Calendar cal = Calendar.getInstance();
		cal.setTime(dDateIn);
		int ageByDay = ageByWeek * 7;
		int daysLeft = dateRaise - ageByDay;
		cal.add(Calendar.DATE, daysLeft);
		dateForSale = df.format(cal.getTime());
	}

	private boolean validateDate(String date) throws NotPossibleException {
		// 20/11/1997
		String strNum1 = date.substring(0, 2);
		int num1 = Integer.parseInt(strNum1);
		String strNum2 = date.substring(3, 5);
		int num2 = Integer.parseInt(strNum2);
		String strNum3 = date.substring(6, 10);
		int num3 = Integer.parseInt(strNum3);
		String slash1 = date.substring(2, 3);
		String slash2 = date.substring(5, 6);
		String slash = "/";
		if (slash1.equals(slash) && slash2.equals(slash) && num1 <= 31 && num2 <= 12 && num3 >= 1961) {
			return true;
		}
		return false;
	}

	public String toString() {
		return "Cow(" + id + "," + ageByWeek + "," + breed + ((status != null) ? "," + status : "") + "," + dateIn
				+ "," + dateForSale + ")";
	}

	// automatically generate the next student id
	private String nextId(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
			idCounter++;
			return "S" + idCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(1));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using
	 *          <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more
			// than one auto attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(1));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}

	public String getId() {
		return id;
	}

	public Integer getAgeByWeek() {
		return ageByWeek;
	}

	public String getSex() {
		return sex;
	}

	public void setSex(String sex) {
		this.sex = sex;
	}

	public String getBreed() {
		return breed;
	}

	public void setBreed(String breed) {
		this.breed = breed;
	}

	public String getDateIn() {
		return dateIn;
	}

	public void setDateIn(String dateIn) {
		if (dateIn != null && !dateIn.equals(this.dateIn)) {
			this.dateIn = dateIn;
			calAutogeneratedValues();
		}
	}

	public String getDateForSale() {
		return dateForSale;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public Cage getCage() {
		return cage;
	}

	public void setCage(Cage cage) {
		this.cage = cage;
	}

	public Integer getWeight() {
		return weight;
	}

	public void setWeight(Integer weight) {
		this.weight = weight;
	}

	public Provider getProvider() {
		return provider;
	}

	public void setProvider(Provider provider) {
		this.provider = provider;
	}

	public String getDateBorn() {
		return dateBorn;
	}

	public void setDateBorn(String dateBorn) {
		if (dateBorn != null && !dateIn.equals(this.dateBorn)) {
			this.dateBorn = dateBorn;
			calAutogeneratedValues();
		}
	}

	public CowHealthReport getCowHeathReport() {
		return cowHeathReport;
	}

}
