package vn.com.cowmanager.model.business;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.exceptions.NotPossibleException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.util.Tuple;
import vn.com.cowmanager.model.feeding.Product;
import vn.com.cowmanager.model.feeding.Storage;

@DClass(schema = "business")
public class ImportManager {
	private static int idCounter = 0;

	@DAttr(name = "id", type = Type.String, id = true, auto = true, optional = false, mutable = false, length = 6)
	private String id;

	@DAttr(name = "provider", type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "ImportManager-has-provider", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "ImportManager", associate = @Associate(cardMax = 25, cardMin = 1, type = Provider.class))
	private Provider provider;

	@DAttr(name = "product", type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "ImportManager-has-product", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "Bill", associate = @Associate(cardMax = 25, cardMin = 1, type = Product.class))
	private Product product;

	@DAttr(name = "cost", type = Type.Double, mutable = false, length = 6)
	private Double cost;

	@DAttr(name = "quantity", type = Type.Integer, optional = false, length = 6)
	private Integer quantity;

	@DAttr(name = "totalCost", type = Type.Double, mutable = false, length = 6)
	private Double totalCost;

	@DAttr(name = "dateIn", type = Type.String, length = 15, optional = false)
	private String dateIn;

	@DAttr(name = "storage", type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "ImportManager-has-storage", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "ImportManager", associate = @Associate(cardMax = 25, cardMin = 1, type = Storage.class))
	private Storage storage;

	public ImportManager(String id, Provider provider, Product product, Double cost, Integer quantity, Double totalCost,
			String dateIn, Storage storage) {
		this.id = nextId(id);
		this.provider = provider;
		this.product = product;
		this.quantity = quantity;
		if (validateDate(dateIn)) {
			this.dateIn = dateIn;
		} else {
			throw new NotPossibleException(null,
					"Ä�á»‹nh dáº¡ng ngÃ y khÃ´ng há»£p lá»‡, ngÃ y Ä‘Æ°á»£c Ä‘á»‹nh dáº¡ng Ä‘Ãºng theo: dd/MM/yyyy");
		}
		this.storage = storage;
		calAutoGeneratedValues();
		storage.setQuantity(storage.getQuantity() + quantity);
	}

	public ImportManager(@AttrRef("provider") Provider provider, @AttrRef("product") Product product,
			@AttrRef("cost") Double cost, @AttrRef("quantity") Integer quantity, @AttrRef("totalCost") Double totalCost,
			@AttrRef("dateIn") String dateIn, @AttrRef("storage") Storage storage) {
		this(null, provider, product, cost, quantity, totalCost, dateIn, storage);
	}

	public ImportManager(@AttrRef("provider") Provider provider, @AttrRef("product") Product product,
			@AttrRef("quantity") Integer quantity, @AttrRef("totalCost") Double totalCost,
			@AttrRef("dateIn") String dateIn, @AttrRef("storage") Storage storage) {
		this(null, provider, product, null, quantity, totalCost, dateIn, storage);
	}

	// automatically generate the next student id
	private String nextId(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
			idCounter++;
			return "IM" + idCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(2));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using
	 *          <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more
			// than one auto attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(2));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}

	public void calAutoGeneratedValues() {
		getCostFromProduct();
		calTotalCost();
	}

	private void getCostFromProduct() {
		cost = product.getCost();
	}

	private void calTotalCost() {
		totalCost = cost * quantity;
	}

	private boolean validateDate(String date) throws NotPossibleException {
		// 20/11/1997
		String strNum1 = date.substring(0, 2);
		int num1 = Integer.parseInt(strNum1);
		String strNum2 = date.substring(3, 5);
		int num2 = Integer.parseInt(strNum2);
		String strNum3 = date.substring(6, 10);
		int num3 = Integer.parseInt(strNum3);
		String slash1 = date.substring(2, 3);
		String slash2 = date.substring(5, 6);
		String slash = "/";
		if (slash1.equals(slash) && slash2.equals(slash) && num1 <= 31 && num2 <= 12 && num3 >= 1961) {
			return true;
		}
		return false;
	}

	@Override
	public String toString() {
		return "ImportManager(" + id + ", " + provider + ", " + product + ", " + quantity + ", " + dateIn + ", " + cost
				+ ", " + totalCost + ")";
	}

	public String getId() {
		return id;
	}

	public Provider getProvider() {
		return provider;
	}

	public void setProvider(Provider provider) {
		this.provider = provider;
	}

	public Product getProduct() {
		return product;
	}

	public void setProduct(Product product) {
		this.product = product;
	}

	public Double getCost() {
		return cost;
	}

	public Integer getQuantity() {
		return quantity;
	}

	public void setQuantity(Integer quantity) {
		if (quantity != null && !quantity.equals(this.quantity)) {
			this.quantity = quantity;
			calAutoGeneratedValues();
		}
	}

	public Double getTotalCost() {
		return totalCost;
	}

	public String getDateIn() {
		return dateIn;
	}

	public void setDateIn(String dateIn) {
		if (dateIn != null && !dateIn.equals(this.dateIn)) {
			this.dateIn = dateIn;
			calAutoGeneratedValues();
		}
	}

	public Storage getStorage() {
		return storage;
	}

	public void setStorage(Storage storage) {
		this.storage = storage;
	}

}
